//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Пиши_Стирай.Entities
{
    using System;
    using System.Linq;
    using System.Collections.Generic;

    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.OrderProducts = new HashSet<OrderProduct>();
        }

        public int OrderID { get; set; }
        public Nullable<int> OrderStatusId { get; set; }
        public Nullable<int> OrderPickupPointId { get; set; }
        public Nullable<int> UserId { get; set; }
        public System.DateTime OrderBeginDate { get; set; }
        public System.DateTime OrderDeliveryDate { get; set; }
        public int TakeCode { get; set; }

        public virtual PickupPoint PickupPoint { get; set; }
        public virtual OrderStatu OrderStatu { get; set; }
        public virtual User User { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProducts { get; set; }

        public Decimal BaseOrderCost
        {
            get
            {
                Decimal price = OrderProducts.Sum(op => op.Product.FinalCost * op.CountInOrder);

                return price;
            }
        }

        public Decimal FinalOrderDiscount
        {
            get
            {
                Decimal discount = OrderProducts.Sum(op => op.Product.AbsoluteDiscount * op.CountInOrder);

                return discount;
            }
        }

        public Decimal FinalOrderCost
        {
            get
            {
                return BaseOrderCost - FinalOrderDiscount;
            }
        }

        public void InsertNewProduct(Product product)
        {
            OrderProduct existingProduct = OrderProducts.FirstOrDefault(op => op.ProductArticleNumber == product.ProductArticleNumber);

            if (existingProduct == null)
                OrderProducts.Add(new OrderProduct() 
                { 
                    ProductArticleNumber = product.ProductArticleNumber,
                    Product = product,
                    Order = this,
                    OrderID = OrderID,
                    CountInOrder = 1
                });

            else
                existingProduct.CountInOrder++;
        }

        public Boolean RemoveProduct(Product product)
        {
            Boolean result = OrderProducts.Remove(OrderProducts.FirstOrDefault(op =>
                             op.ProductArticleNumber == product.ProductArticleNumber));

            return result;
        }

        public void CalculateDeliveryDate()
        {
            Boolean condition = OrderProducts.ToList().TrueForAll(op => op.Product.ProductQuantityInStock > 3);

            OrderDeliveryDate = condition ? OrderBeginDate.AddDays(3) : OrderBeginDate.AddDays(6);
        }
    }
}
